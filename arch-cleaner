#!/bin/bash

# Clean Arch Linux system
set -euo pipefail

# Check if script is run as root
if [ "$(id -u)" -ne 0 ]; then
    echo "Please run as root or with sudo." >&2
    exit 1
fi

# Parse arguments
CLEAN_TRASH=0
REBOOT=0
AGGRESSIVE=0

while getopts ":tra" opt; do
    case $opt in
        t) CLEAN_TRASH=1 ;;
        r) REBOOT=1 ;;
        a) AGGRESSIVE=1 ;;
        \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
    esac
done

echo "Starting system cleanup..."

# Update package databases and upgrade all packages 
echo -e "\nUpdating system ..."
if [ $AGGRESSIVE -eq 1 ]; then
    pacman -Syyu --noconfirm  # Force refresh databases
else
    pacman -Syu --noconfirm    # Normal update
fi

# Remove orphaned packages
echo -e "\nRemoving orphaned packages..."
if [ $AGGRESSIVE -eq 1 ]; then
    # Aggressive: remove all orphaned packages unconditionally
    pacman -Rns --noconfirm $(pacman -Qtdq 2>/dev/null) 2>/dev/null || echo "No orphaned packages found."
else
    # Normal: confirm list before removal
    orphaned=$(pacman -Qtdq 2>/dev/null || true)
    if [[ -n "$orphaned" ]]; then
        echo "$orphaned" | pacman -Rns --noconfirm -
    else
        echo "No orphaned packages found."
    fi
fi

# Clear pacman cache
echo -e "\nClearing pacman package cache..."
if [ $AGGRESSIVE -eq 1 ]; then
    pacman -Scc --noconfirm  # Remove all cached packages
else
    pacman -Sc --noconfirm   # Remove uninstalled packages from cache
fi

# Remove unused packages (optional packages no longer required by any installed package)
echo -e "\nRemoving unused packages..."
if [ $AGGRESSIVE -eq 1 ]; then
    # Aggressive: remove all unused packages unconditionally
    pacman -Rns --noconfirm $(pacman -Qdttq 2>/dev/null) 2>/dev/null || echo "No unused packages found."
else
    # Normal: confirm list before removal
    unused=$(pacman -Qdqtt 2>/dev/null || true)
    if [[ -n "$unused" ]]; then
        echo "$unused" | pacman -Rns --noconfirm -
    else
        echo "No unused packages found."
    fi
fi

# Clean journal logs (keep last 50MB)
echo -e "\nCleaning systemd journal logs..."
journalctl --vacuum-size=50M

# Remove temporary files only if rebooting or in aggressive mode
if [ $REBOOT -eq 1 ] || [ $AGGRESSIVE -eq 1 ]; then
    echo -e "\nRemoving temporary files..."
    rm -rf /tmp/* /var/tmp/*
else
    echo -e "\nSkipping temp files removal (not in aggressive mode or reboot not requested)"
fi

# Clean cache in home directories
echo -e "\nCleaning user cache..."
for userdir in /home/*; do
    user=$(basename "$userdir")
    if [ -d "$userdir/.cache" ]; then
        echo "Cleaning cache for user $user"
        if [ $AGGRESSIVE -eq 1 ]; then
            rm -rf "$userdir/.cache"  # Remove entire cache directory
        else
            rm -rf "$userdir/.cache/"*  # Just empty the cache
        fi
    fi
done

# Empty trash for all users if requested
if [ $CLEAN_TRASH -eq 1 ]; then
    echo -e "\nEmptying trash for all users..."
    for userdir in /home/*; do
        user=$(basename "$userdir")
        trash_dir="$userdir/.local/share/Trash"
        if [ -d "$trash_dir" ]; then
            echo "Emptying trash for user $user"
            rm -rf "$trash_dir/files/"*
            rm -rf "$trash_dir/info/"*
        fi
    done
    # Clean root's trash if exists
    if [ -d "/root/.local/share/Trash" ]; then
        echo "Emptying trash for root"
        rm -rf "/root/.local/share/Trash/files/"*
        rm -rf "/root/.local/share/Trash/info/"*
    fi
fi

echo -e "\nCleanup complete!"

# Reboot if requested
if [ $REBOOT -eq 1 ]; then
    echo -e "\nRebooting system..."
    sleep 2
    reboot
fi
